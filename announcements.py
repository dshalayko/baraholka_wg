import asyncio
import json

import aiosqlite
from datetime import datetime

import telegram
from telegram import Update, InputMediaPhoto, ReplyKeyboardRemove
from telegram.ext import ContextTypes

from comments_manager import forward_thread_replies
from config import *
from logger import logger
from keyboards import *
from utils import get_serbia_time, get_private_channel_post_link
from database import (get_user_announcements,
                      )

async def create_announcement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID –≤ context.user_data."""
    user_id = update.message.from_user.id
    username = update.message.from_user.username if update.message.from_user.username else "None"

    if username == "None":
        logger.warning(f"‚ö†Ô∏è [create_announcement] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç username, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º 'None'.")

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            INSERT INTO announcements (user_id, username, description, price, photo_file_ids)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, "", "", json.dumps([])))
        ann_id = cursor.lastrowid
        await db.commit()

    context.user_data['ann_id'] = ann_id
    context.user_data['photos'] = []
    context.user_data['username'] = username

    await update.message.reply_text(START_NEW_AD)
    return EDIT_DESCRIPTION

async def ask_photo_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ, –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ –≤—ã–±–æ—Ä."""
    query = update.callback_query
    message = update.message

    if query:
        await query.answer()
        user_id = query.from_user.id
        message_to_delete = query.message
    else:
        user_id = message.from_user.id
        message_to_delete = message

    ann_id = context.user_data.get('ann_id')

    if not ann_id:
        logger.error("‚ùå [ask_photo_action] –û—à–∏–±–∫–∞: ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        error_message = NO_ANN_ID_MESSAGE_ERROR
        await (query.message.reply_text(error_message) if query else message.reply_text(error_message))
        return CHOOSING


    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT photo_file_ids FROM announcements WHERE id = ?', (ann_id,))
        row = await cursor.fetchone()
        existing_photos = json.loads(row[0]) if row and row[0] else []


    if not existing_photos:
        logger.info(f"üì∏ [ask_photo_action] –í –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ {ann_id} –Ω–µ—Ç —Ñ–æ—Ç–æ. –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ.")
        await (query.message.reply_text(ASK_FOR_PHOTOS, reply_markup=photo_markup_with_cancel, parse_mode='Markdown') if query else message.reply_text(ASK_FOR_PHOTOS, reply_markup=photo_markup_with_cancel, parse_mode='Markdown'))
        return ADDING_PHOTOS

    if query and query.data:
        action = query.data
        try:
            await message_to_delete.delete()
            logger.info(f"üóëÔ∏è [ask_photo_action] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è, ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")
        except telegram.error.BadRequest:
            logger.warning(f"‚ö†Ô∏è [ask_photo_action] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–∂–µ —É–¥–∞–ª–µ–Ω–æ?), ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")

        if action.startswith("addphotos"):
            logger.info(f"‚ûï [ask_photo_action] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –î–û–ë–ê–í–ò–¢–¨ —Ñ–æ—Ç–æ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {ann_id}")
            await query.message.reply_text(ADD_NEW_PHOTOS, reply_markup=finish_photo_markup_with_cancel)
            return ADDING_PHOTOS

        elif action.startswith("replacephotos"):
            logger.info(f"üîÑ [ask_photo_action] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ó–ê–ú–ï–ù–ò–¢–¨ —Ñ–æ—Ç–æ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ {ann_id}")

            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute('UPDATE announcements SET photo_file_ids = ? WHERE id = ?', (json.dumps([]), ann_id))
                await db.commit()

            await query.message.reply_text(OLD_PHOTOS_DELETED, reply_markup=finish_photo_markup_with_cancel)
            return ADDING_PHOTOS

        elif action.startswith("cancel_photo"):
            logger.info(f"üö´ [ask_photo_action] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ, ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")
            async with aiosqlite.connect(DB_PATH) as db:
                cursor = await db.execute('SELECT message_ids FROM announcements WHERE id = ?', (ann_id,))
                row = await cursor.fetchone()
                message_ids = json.loads(row[0]) if row and row[0] else []
                is_editing = bool(message_ids)

            await send_preview(update, context, editing=is_editing)
            return CHOOSING

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ", callback_data=f'addphotos_{ann_id}')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f'replacephotos_{ann_id}')],
        [InlineKeyboardButton("üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f'cancel_photo_{ann_id}')]
    ])

    message_text = HAS_PHOTOS

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    sent_message = await (query.message.reply_text(message_text, reply_markup=keyboard, parse_mode='Markdown') if query else message.reply_text(message_text, reply_markup=keyboard, parse_mode='Markdown'))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['photo_action_message_id'] = sent_message.message_id

    return ASK_PHOTO_ACTION

async def adding_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –≤ 10 —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑."""
    ann_id = context.user_data.get('ann_id')

    if not ann_id:
        logger.error("‚ùå [adding_photos] –û—à–∏–±–∫–∞: ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text(NO_ANN_ID_MESSAGE_ERROR)
        return CHOOSING

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT photo_file_ids FROM announcements WHERE id = ?', (ann_id,))
        row = await cursor.fetchone()
        photos = json.loads(row[0]) if row and row[0] else []

    send_add_photo_text = len(photos) == 1

    if update.message.photo:
        photo = update.message.photo[-1]
        if len(photos) < 10:
            photos.append(photo.file_id)
            logger.info(f"üñºÔ∏è [adding_photos] –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {photo.file_id}, ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")

            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute('UPDATE announcements SET photo_file_ids = ? WHERE id = ?', (json.dumps(photos), ann_id))
                await db.commit()

            logger.info(f"üì∏ [adding_photos] –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –≤ –ë–î –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ann_id}: {photos}")

            if send_add_photo_text:
                await update.message.reply_text(ADD_PHOTO_TEXT, reply_markup=finish_photo_markup_with_cancel)

        else:
            await update.message.reply_text(MAX_PHOTOS_REACHED)

    elif update.message.text in [NO_PHOTO_AD, FINISH_PHOTO_UPLOAD]:
        logger.info(f"üì∏ [adding_photos] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ, ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")

        processing_message = await update.message.reply_text(PROCESSING_PHOTOS, reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(1)

        try:
            await processing_message.delete()
            logger.info(f"üóëÔ∏è [adding_photos] –£–¥–∞–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ, ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")
        except telegram.error.BadRequest:
            logger.warning(f"‚ö†Ô∏è [adding_photos] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–∂–µ —É–¥–∞–ª–µ–Ω–æ?), ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")

        logger.info(f"üì∫ [adding_photos] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä, ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")
        await send_preview(update, context, editing=True)
        return CHOOSING

    else:
        logger.warning(f"‚ö†Ô∏è [adding_photos] –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏, ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")
        await update.message.reply_text(SEND_PHOTO_OR_FINISH_OR_NO_PHOTO)

    return ADDING_PHOTOS

async def description_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ë–î."""
    ann_id = context.user_data.get('ann_id')

    if not ann_id:
        logger.error("‚ùå [description_received] –û—à–∏–±–∫–∞: ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–û—à–∏–±–∫–∞: ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return CHOOSING

    description = update.message.text.strip()

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
    if len(description) > 1024:
        logger.warning(f"‚ö†Ô∏è [description_received] –í–≤–µ–¥—ë–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(description)} —Å–∏–º–≤–æ–ª–æ–≤), ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")
        await update.message.reply_text(f"‚ùó –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞. –°–µ–π—á–∞—Å: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–æ—Ä–æ—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return EDIT_DESCRIPTION

    logger.info(f"‚úèÔ∏è [description_received] –í–≤–µ–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {description}, ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('UPDATE announcements SET description = ? WHERE id = ?', (description, ann_id))
        await db.commit()

    if context.user_data.get('is_editing', False):
        logger.info(f"üì∫ [description_received] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")
        await send_preview(update, context, editing=True)
        return CHOOSING

    await update.message.reply_text('–ü—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É.')
    return EDIT_PRICE

async def price_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"üí∞ [price_received] –Ω–∞—á–∞–ª–æ")

    ann_id = context.user_data.get('ann_id')

    if not ann_id:
        logger.error("‚ùå [price_received] –û—à–∏–±–∫–∞: ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–û—à–∏–±–∫–∞: ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return CHOOSING

    price = update.message.text.strip()

    if len(price) > 1024:
        logger.warning(f"‚ö†Ô∏è [price_received] –í–≤–µ–¥—ë–Ω–Ω–∞—è —Ü–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ({len(price)} —Å–∏–º–≤–æ–ª–æ–≤), ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")
        await update.message.reply_text(f"‚ùó –¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞. –°–µ–π—á–∞—Å: {len(price)} —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–æ—Ä–æ—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return EDIT_PRICE

    logger.info(f"üí∞ [price_received] –í–≤–µ–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞: {price}, ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('UPDATE announcements SET price = ? WHERE id = ?', (price, ann_id))
        await db.commit()

    if context.user_data.get('is_editing', False):
        logger.info(f"üì∫ [price_received] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")
        await send_preview(update, context, editing=True)
        return CHOOSING

    logger.info(
        f"üì∏ [price_received] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ, ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ann_id}")

    return await ask_photo_action(update, context)

async def send_preview(update: Update, context: ContextTypes.DEFAULT_TYPE, editing=False):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    ann_id = context.user_data.get('ann_id')

    if not ann_id:
        logger.warning("‚ö†Ô∏è [send_preview] ann_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ context.user_data, –∏—â–µ–º –≤ –ë–î.")
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute('SELECT id FROM announcements ORDER BY id DESC LIMIT 1')
            row = await cursor.fetchone()
            if row:
                ann_id = row[0]
                context.user_data['ann_id'] = ann_id
                logger.info(f"‚úÖ [send_preview] –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π ann_id –≤ –ë–î: {ann_id}")
            else:
                logger.error("‚ùå [send_preview] –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ë–î.")
                await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
                return CHOOSING

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            'SELECT description, price, username, photo_file_ids, message_ids, timestamp FROM announcements WHERE id = ?',
            (ann_id,))
        row = await cursor.fetchone()

        if not row:
            logger.error(f"‚ùå [send_preview] –û—à–∏–±–∫–∞: –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {ann_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.")
            return CHOOSING

        description, price, username, photo_file_ids, message_ids_json, timestamp = row
        photos = json.loads(photo_file_ids) if photo_file_ids else []
        message_ids = json.loads(message_ids_json) if message_ids_json else None

        is_updated = bool(message_ids)
        timestamp = timestamp if timestamp else ""

    logger.info(f"üì∫ [send_preview] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ID {ann_id}, is_updated={is_updated}, timestamp={timestamp}")

    message = await format_announcement_text(
        update,
        description, price, username, ann_id=ann_id,
        is_updated=is_updated, message_ids=message_ids, timestamp=timestamp
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit_{ann_id}')],
        [InlineKeyboardButton("üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f'post_{ann_id}')]
    ])

    logger.info(f"üì© [send_preview] –ö–Ω–æ–ø–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã, callback_data: edit_{ann_id}, post_{ann_id}")
    if photos:
        media = [InputMediaPhoto(photo_id, caption=message if idx == 0 else None, parse_mode='Markdown')
                 for idx, photo_id in enumerate(photos)]
        if update.message:
            await update.message.reply_media_group(media=media)
            await update.message.reply_text(PREVIEW_TEXT, reply_markup=keyboard, parse_mode='Markdown')
        else:
            await update.callback_query.message.reply_media_group(media=media)
            await update.callback_query.message.reply_text(PREVIEW_TEXT, reply_markup=keyboard, parse_mode='Markdown')
    else:
        if update.message:
            await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        else:
            await update.callback_query.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def publish_announcement(update: Update, context: ContextTypes.DEFAULT_TYPE, ann_id):
    logger.info(f"üì¢ [publish_announcement] –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å ID {ann_id}")

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            'SELECT description, price, username, photo_file_ids, message_ids FROM announcements WHERE id = ?',
            (ann_id,))
        row = await cursor.fetchone()

        if not row:
            logger.error(f"‚ùå [publish_announcement] –û—à–∏–±–∫–∞: –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {ann_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.")
            return None

        description, price, username, photo_file_ids, message_ids_json = row
        photos = json.loads(photo_file_ids) if photo_file_ids else []
        old_message_ids = json.loads(message_ids_json) if message_ids_json else []

        is_editing = bool(old_message_ids)

    current_timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"üì¢ [publish_announcement] –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ann_id}, is_editing={is_editing}")

    disable_notification = is_editing
    logger.info(f"üîî [publish_announcement] disable_notification={disable_notification}")

    message = await format_announcement_text(update, description, price, username, ann_id=ann_id,
                                             is_updated=is_editing, message_ids=old_message_ids,
                                             timestamp=current_timestamp)

    if photos:
        media = [InputMediaPhoto(photo_id, caption=message if idx == 0 else None, parse_mode='Markdown')
                 for idx, photo_id in enumerate(photos)]
        sent_messages = await context.bot.send_media_group(chat_id=PRIVATE_CHANNEL_ID, media=media,
                                                           disable_notification=disable_notification)
        new_message_ids = [msg.message_id for msg in sent_messages]
    else:
        sent_message = await context.bot.send_message(chat_id=PRIVATE_CHANNEL_ID, text=message,
                                                      parse_mode='Markdown', disable_notification=disable_notification)
        new_message_ids = [sent_message.message_id]

    logger.info(f"‚úÖ [publish_announcement] –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, ID: {ann_id}, —Å–æ–æ–±—â–µ–Ω–∏—è: {new_message_ids}")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('UPDATE announcements SET message_ids = ?, timestamp = ? WHERE id = ?',
                         (json.dumps(new_message_ids), current_timestamp, ann_id))
        await db.commit()

    if is_editing and old_message_ids:
        old_message_id = old_message_ids[0]
        new_message_id = new_message_ids[0]
        logger.info(f"üîÑ [publish_announcement] –ü–µ—Ä–µ–Ω–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {old_message_id} ‚Üí {new_message_id}")

        transfer_success = await forward_thread_replies(old_message_id, new_message_id)

        if not transfer_success:
            logger.warning(f"‚ö†Ô∏è [publish_announcement] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å {old_message_id} –Ω–∞ {new_message_id}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")

        logger.info(f"üóëÔ∏è [publish_announcement] –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {old_message_ids}")
        for message_id in old_message_ids:
            try:
                await context.bot.delete_message(chat_id=PRIVATE_CHANNEL_ID, message_id=message_id)
                logger.info(f"‚úÖ [publish_announcement] –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞.")
            except Exception as e:
                logger.error(f"‚ùå [publish_announcement] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {message_id}: {e}")

    return get_private_channel_post_link(PRIVATE_CHANNEL_ID, new_message_ids[0])

async def delete_announcement_by_id(ann_id, context, query, is_editing=False):
    logger.info(f"üóëÔ∏è [delete_announcement_by_id] –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ann_id}, is_editing={is_editing}")

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT message_ids FROM announcements WHERE id = ?', (ann_id,))
        row = await cursor.fetchone()

        if row:
            message_ids = json.loads(row[0]) if row[0] else []
            for message_id in message_ids:
                try:
                    await context.bot.delete_message(chat_id=PRIVATE_CHANNEL_ID, message_id=message_id)
                    logger.info(f"‚úÖ [delete_announcement_by_id] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞.")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

        if not is_editing:
            await db.execute('DELETE FROM announcements WHERE id = ?', (ann_id,))
            await db.commit()
            logger.info(f"‚úÖ [delete_announcement_by_id] –û–±—ä—è–≤–ª–µ–Ω–∏–µ {ann_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

    logger.info(f"‚úÖ [delete_announcement_by_id] –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ann_id}.")

async def show_user_announcements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_id = update.effective_user.id
    rows = await get_user_announcements(user_id)
    reply_message = update.effective_message

    if "announcement_message_ids" in context.user_data:
        for msg_id in context.user_data["announcement_message_ids"]:
            try:
                await context.bot.delete_message(chat_id=reply_message.chat_id, message_id=msg_id)
                logger.info(f"üóëÔ∏è [show_user_announcements] –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {msg_id}")
            except telegram.error.BadRequest:
                logger.warning(f"‚ö†Ô∏è [show_user_announcements] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {msg_id}")

    context.user_data["announcement_message_ids"] = []  # ‚úÖ –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    if rows:
        header_message = await reply_message.reply_text(USER_ADS_MESSAGE, parse_mode="Markdown")
        context.user_data["announcement_message_ids"].append(header_message.message_id)

    if not rows:
        no_ads_message = await reply_message.reply_text(NO_ANNOUNCEMENTS_MESSAGE, reply_markup=markup)
        context.user_data["announcement_message_ids"].append(no_ads_message.message_id)
        return CHOOSING

    for row in rows:
        ann_id, message_ids_json, description, price, photo_file_ids_json = row
        message_ids = json.loads(message_ids_json) if message_ids_json else []
        photos = json.loads(photo_file_ids_json) if photo_file_ids_json else []

        status = "üìù _–ß–µ—Ä–Ω–æ–≤–∏–∫_\n" if not message_ids else f"[–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ üìå]({get_private_channel_post_link(PRIVATE_CHANNEL_ID, message_ids[0])})\n"

        message = f"{ANNOUNCEMENT_LIST_MESSAGE.format(description=description, price=price)}\n\n{status}"

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit_{ann_id}'),
                InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{ann_id}')
            ]
        ])

        logger.info(f"üì© [show_user_announcements] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ID: {ann_id} —Å –∫–Ω–æ–ø–∫–∞–º–∏: edit_{ann_id}, delete_{ann_id}")

        if photos:
            sent_message = await reply_message.reply_photo(photo=photos[0], caption=message, reply_markup=keyboard, parse_mode='Markdown')
        else:
            sent_message = await reply_message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        context.user_data["announcement_message_ids"].append(sent_message.message_id)

    return CHOOSING

async def format_announcement_text(update: Update, description, price, username, ann_id, is_updated=False, message_ids=None, timestamp=None):
    current_time = get_serbia_time()

    # –ï—Å–ª–∏ username = "None", –∏—Å–ø–æ–ª—å–∑—É–µ–º first_name + last_name
    if username == "None":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user (–±–µ—Ä—ë–º –ª–∏–±–æ –∏–∑ update.message, –ª–∏–±–æ –∏–∑ update.callback_query)
        user = update.message.from_user if update.message else update.callback_query.from_user if update.callback_query else None

        if not user:
            logger.error("‚ùå [format_announcement_text] –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

        first_name = user.first_name if user.first_name else "–ê–Ω–æ–Ω–∏–º"
        last_name = user.last_name if user.last_name else ""
        username = f"{first_name} {last_name}".strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª, –µ—Å–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ—Ç
        contact_info = f"{CONTACT_TEXT}\n@{username.replace('_', '\\_')}"
    else:
        contact_info = f"{CONTACT_TEXT}\n@{username.replace('_', '\\_')}"


    message = f"{description}\n\n"
    message += f"{PRICE_TEXT}\n{price}\n\n"
    message += contact_info

    if is_updated and message_ids:
        message += f"\n\n{UPDATED_TEXT.format(current_time=current_time)}"
    #message += f"#{ann_id}\n\n"
    return message
