import aiosqlite
from telegram.ext import ContextTypes
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.helpers import escape_markdown
from telegram.constants import ParseMode
from config import PRIVATE_CHANNEL_ID, INVITE_LINK, DB_PATH

from logger import logger
from datetime import datetime
import pytz

from database import has_user_ads
from keyboards import (
    get_markup,
    get_add_advertisement_keyboard,
)
from texts import (
    t,
    get_lang,
    SUBSCRIPTION_PROMPT,
    I_SUBSCRIBED_BUTTON,
    COMMENT_NOTIFICATION,
)


async def is_subscribed(user_id, context: ContextTypes.DEFAULT_TYPE):
    try:
        member = await context.bot.get_chat_member(chat_id=PRIVATE_CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'creator', 'administrator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = get_lang(update)

    has_ads = await has_user_ads(user_id)

    if update.message:
        # Responding to a regular message
        if has_ads:
            await update.message.reply_text(
                t("CHOOSE_ACTION_NEW", lang),
                reply_markup=get_markup(lang)  # Two buttons
            )
        else:
            await update.message.reply_text(
                t("CHOOSE_ACTION_NEW", lang),
                reply_markup=get_add_advertisement_keyboard(lang)  # Single button
            )
    elif update.callback_query:
        # Responding to a callback query
        if has_ads:
            await update.callback_query.message.reply_text(
                t("CHOOSE_ACTION_NEW", lang),
                reply_markup=get_markup(lang)  # Two buttons
            )
        else:
            await update.callback_query.message.reply_text(
                t("CHOOSE_ACTION_NEW", lang),
                reply_markup=get_add_advertisement_keyboard(lang)  # Single button
            )

async def check_subscription_message(update: Update):
    lang = get_lang(update)
    text = t("SUBSCRIPTION_PROMPT", lang)
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(t("I_SUBSCRIBED_BUTTON", lang), callback_data='check_subscription')]
    ])
    return text, keyboard

def get_serbia_time():
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è –°–µ—Ä–±–∏–∏ (Europe/Belgrade)
    serbia_tz = pytz.timezone('Europe/Belgrade')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∞—Å–æ–≤—É—é –∑–æ–Ω—É –°–µ—Ä–±–∏–∏
    serbia_time = datetime.now(pytz.utc).astimezone(serbia_tz)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    formatted_time = serbia_time.strftime('%d.%m.%Y –≤ %H:%M')

    return formatted_time

def get_private_channel_post_link(channel_id, message_id):
    channel_id_str = str(channel_id)
    if channel_id_str.startswith('-100'):
        channel_id_str = channel_id_str[4:]
    return f"https://t.me/c/{channel_id_str}/{message_id}"

async def notify_owner_about_comment(context, message_id, user_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Å—Ç–∞–≤–∏–ª –Ω–µ –æ–Ω —Å–∞–º."""
    try:
        logger.info(f"üöÄ [notify_owner_about_comment] –ó–∞–ø—É—Å–∫ —Å message_id={message_id}, user_id={user_id}")

        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT id, user_id, message_ids FROM announcements")
            rows = await cursor.fetchall()

        logger.info(f"üîç [notify_owner_about_comment] –ù–∞–π–¥–µ–Ω–æ {len(rows)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ, –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ message_id...")

        announcement = None
        for row in rows:
            ann_id, owner_id, message_ids = row
            logger.info(f"üìå [notify_owner_about_comment] –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {ann_id} (–≤–ª–∞–¥–µ–ª–µ—Ü {owner_id})")

            if not message_ids:
                logger.warning(f"‚ö†Ô∏è [notify_owner_about_comment] –£ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ann_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç message_ids, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            message_ids_list = eval(message_ids) if isinstance(message_ids, str) else message_ids
            if message_id in message_ids_list:
                announcement = (ann_id, owner_id)
                logger.info(f"‚úÖ [notify_owner_about_comment] –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ID {ann_id}, –≤–ª–∞–¥–µ–ª–µ—Ü {owner_id}")
                break

        if not announcement:
            logger.error(f"‚ùå [notify_owner_about_comment] –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å message_id={message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        ann_id, owner_id = announcement

        if owner_id == user_id:
            logger.info(f"üîï [notify_owner_about_comment] –í–ª–∞–¥–µ–ª–µ—Ü {owner_id} —Å–∞–º –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return

        announcement_link = get_private_channel_post_link(PRIVATE_CHANNEL_ID, message_id)

        escaped_text = escape_markdown(text, version=2)

        lang = 'en'
        try:
            user = await context.bot.get_chat(owner_id)
            lang = get_lang(user)
        except Exception:
            pass

        # üì© –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = t("COMMENT_NOTIFICATION", lang).format(
            text=escaped_text,
            link=announcement_link,
        )

        # ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
        logger.info(f"üì® [notify_owner_about_comment] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}...")
        await context.bot.send_message(
            chat_id=owner_id,
            text=message_text,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True
        )
        logger.info(f"‚úÖ [notify_owner_about_comment] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}.")

    except Exception as e:
        logger.error(f"‚ùå [notify_owner_about_comment] –û—à–∏–±–∫–∞: {e}")
