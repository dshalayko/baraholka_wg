import asyncio
from pyrogram import Client
from pyrogram.enums import ChatType

from logger import logger
from config import API_ID, API_HASH, CHAT_NAME, CHAT_ID


async def get_supergroup_id(app, group_name=None):
    return CHAT_ID

async def forward_thread_replies(old_thread_id, new_thread_id):
    logger.info(f"üöÄ [forward_thread_replies] –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å old_thread_id={old_thread_id}, new_thread_id={new_thread_id}")
    app = Client("my_session", api_id=API_ID, api_hash=API_HASH)

    try:
        await app.start()

        chat_id = await get_supergroup_id(app, CHAT_NAME)
        if not chat_id:
            logger.error("‚ùå [forward_thread_replies] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã.")
            await app.stop()
            return False

        found_message_id = new_message_id = None

        # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        for attempt in range(5):
            async for message in app.get_chat_history(chat_id):
                if getattr(message, "forward_from_message_id", None) == old_thread_id:
                    found_message_id = message.id
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {found_message_id}")
                    break
            if found_message_id:
                break
            logger.warning(f"‚ö†Ô∏è [forward_thread_replies] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/5), –∂–¥–µ–º 2 —Å–µ–∫...")
            await asyncio.sleep(2)

        if not found_message_id:
            logger.error(f"‚ùå [forward_thread_replies] –°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await app.stop()
            return False

        for attempt in range(5):
            async for message in app.get_chat_history(chat_id):
                if getattr(message, "forward_from_message_id", None) == new_thread_id:
                    new_message_id = message.id
                    logger.info(f"‚úÖ [forward_thread_replies] –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {new_message_id}")
                    break
            if new_message_id:
                break
            await asyncio.sleep(2)

        if not new_message_id:
            logger.error(f"‚ùå [forward_thread_replies] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await app.stop()
            return False

        # –ü–µ—Ä–µ–Ω–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        comments = []
        async for message in app.get_chat_history(chat_id):
            if message.reply_to_message_id == found_message_id:
                comments.append(message)

        logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.")
        for comment in reversed(comments):
            try:
                first_name = comment.from_user.first_name if comment.from_user else ""
                last_name = comment.from_user.last_name if comment.from_user and comment.from_user.last_name else ""
                full_name = f"{first_name} {last_name}".strip()

                if comment.text:
                    formatted_text = f"**{full_name}**\n{comment.text}"
                    await app.send_message(
                        chat_id=chat_id,
                        text=formatted_text,
                        reply_to_message_id=new_message_id,
                    )
                    logger.info(f"üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID {comment.id}")

                elif comment.photo:
                    caption = f"**{full_name}**\n{comment.caption or ''}".strip()
                    await app.send_photo(
                        chat_id=chat_id,
                        photo=comment.photo.file_id,
                        caption=caption,
                        reply_to_message_id=new_message_id,
                    )
                    logger.info(f"üì∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è ID {comment.id}")

                elif comment.sticker:
                    await app.send_sticker(
                        chat_id=chat_id,
                        sticker=comment.sticker.file_id,
                        reply_to_message_id=new_message_id,
                    )
                    logger.info(f"üé® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä ID {comment.id}")

                elif comment.animation:
                    caption = f"**{full_name}**\n{comment.caption or ''}".strip()
                    await app.send_animation(
                        chat_id=chat_id,
                        animation=comment.animation.file_id,
                        caption=caption,
                        reply_to_message_id=new_message_id,
                    )
                    logger.info(f"üéûÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è ID {comment.id}")

                elif comment.video:
                    caption = f"**{full_name}**\n{comment.caption or ''}".strip()
                    await app.send_video(
                        chat_id=chat_id,
                        video=comment.video.file_id,
                        caption=caption,
                        reply_to_message_id=new_message_id,
                    )
                    logger.info(f"üé¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ ID {comment.id}")

                elif comment.document:
                    caption = f"**{full_name}**\n{comment.caption or ''}".strip()
                    await app.send_document(
                        chat_id=chat_id,
                        document=comment.document.file_id,
                        caption=caption,
                        reply_to_message_id=new_message_id,
                    )
                    logger.info(f"üìÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç ID {comment.id}")

                elif comment.audio:
                    caption = f"**{full_name}**\n{comment.caption or ''}".strip()
                    await app.send_audio(
                        chat_id=chat_id,
                        audio=comment.audio.file_id,
                        caption=caption,
                        reply_to_message_id=new_message_id,
                    )
                    logger.info(f"üéµ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª ID {comment.id}")

                elif comment.voice:
                    caption = f"**{full_name}**\n{comment.caption or ''}".strip()
                    voice_caption = caption if caption != f"**{full_name}**" else None
                    await app.send_voice(
                        chat_id=chat_id,
                        voice=comment.voice.file_id,
                        caption=voice_caption,
                        reply_to_message_id=new_message_id,
                    )
                    logger.info(f"üé§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {comment.id}")

                elif comment.video_note:
                    await app.send_video_note(
                        chat_id=chat_id,
                        video_note=comment.video_note.file_id,
                        reply_to_message_id=new_message_id,
                    )
                    logger.info(f"üìπ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {comment.id}")

                elif comment.location:
                    await app.send_location(
                        chat_id=chat_id,
                        latitude=comment.location.latitude,
                        longitude=comment.location.longitude,
                        reply_to_message_id=new_message_id,
                    )
                    logger.info(f"üìç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è ID {comment.id}")

                elif comment.venue:
                    await app.send_venue(
                        chat_id=chat_id,
                        latitude=comment.venue.location.latitude,
                        longitude=comment.venue.location.longitude,
                        title=comment.venue.title,
                        address=comment.venue.address,
                        reply_to_message_id=new_message_id,
                    )
                    logger.info(f"üè¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ ID {comment.id}")

                elif comment.contact:
                    await app.send_contact(
                        chat_id=chat_id,
                        phone_number=comment.contact.phone_number,
                        first_name=comment.contact.first_name,
                        last_name=comment.contact.last_name or '',
                        vcard=comment.contact.vcard or None,
                        reply_to_message_id=new_message_id,
                    )
                    logger.info(f"üë§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç ID {comment.id}")

                else:
                    await app.copy_message(
                        chat_id=chat_id,
                        from_chat_id=chat_id,
                        message_id=comment.id,
                        reply_to_message_id=new_message_id,
                    )
                    logger.info(f"üîÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {comment.id}")

            except Exception as e:
                logger.error(f"‚ùå [forward_thread_replies] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ID {comment.id}: {e}")

        await app.stop()
        logger.info(f"‚úÖ [forward_thread_replies] –ü–µ—Ä–µ–Ω–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        await app.stop()
        return False

async def get_message_id_by_thread_id(thread_id):
    """–ò—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —É –∫–æ—Ç–æ—Ä–æ–≥–æ message_id == thread_id, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ. –õ–æ–≥–∏—Ä—É–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ."""
    logger.info(f"üîç [get_message_id_by_thread_id] –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å message_id={thread_id}")

    async with Client("my_session", api_id=API_ID, api_hash=API_HASH) as app:
        try:
            chat_id = await get_supergroup_id(app, CHAT_NAME)
            if not chat_id:
                logger.error("‚ùå [get_message_id_by_thread_id] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã.")
                return None

            logger.info(f"üì• [get_message_id_by_thread_id] –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ {chat_id}...")

            for attempt in range(5):  # 5 –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 —Å–µ–∫
                found_message = None
                async for message in app.get_chat_history(chat_id):

                    # üîç –ï—Å–ª–∏ message_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å thread_id
                    if message.id == thread_id:
                        found_message = message.forward_from_message_id

                    if found_message:
                        logger.info(
                            f"‚úÖ [get_message_id_by_thread_id] –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å message_id={found_message} "
                            f"(—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å thread_id={thread_id})"
                        )
                        return found_message

                logger.warning(
                    f"‚ö†Ô∏è [get_message_id_by_thread_id] –ù–µ –Ω–∞–π–¥–µ–Ω message_id (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/5), –∂–¥–µ–º 2 —Å–µ–∫..."
                )
                await asyncio.sleep(2)

            logger.error(f"‚ùå [get_message_id_by_thread_id] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å message_id={thread_id} –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫.")

        except Exception as e:
            logger.error(f"‚ùå [get_message_id_by_thread_id] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ message_id: {e}")
            return None


