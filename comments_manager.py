import asyncio
from pyrogram import Client
from pyrogram.enums import ChatType

from logger import logger
from config import API_ID, API_HASH, CHAT_NAME

async def get_supergroup_id(app, group_name=None):
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç. –ï—Å–ª–∏ –±–æ—Ç –≤ –æ–¥–Ω–æ–π —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ ‚Äî –±–µ—Ä—ë–º –µ—ë —Å—Ä–∞–∑—É."""
    logger.info("üîç [get_supergroup_id] –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...")

    found_supergroups = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø

    async for dialog in app.get_dialogs():
        chat_type = dialog.chat.type  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —á–∞—Ç–∞
        chat_id = dialog.chat.id
        chat_title = dialog.chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

        # –ï—Å–ª–∏ —ç—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        if chat_type == ChatType.SUPERGROUP:
            found_supergroups.append((chat_id, chat_title))

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
    if found_supergroups:
        if group_name:
            # –ò—â–µ–º —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            for chat_id, title in found_supergroups:
                if title == group_name:
                    logger.info(f"‚úÖ [get_supergroup_id] –ù–∞–π–¥–µ–Ω–∞ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ '{group_name}' —Å ID: {chat_id}")
                    return chat_id

            logger.warning(f"‚ö†Ô∏è [get_supergroup_id] –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ '{group_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ {len(found_supergroups)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.")
        else:
            # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ `group_name`, –Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –æ–¥–Ω–∞ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if len(found_supergroups) == 1:
                chat_id, title = found_supergroups[0]
                logger.info(f"‚úÖ [get_supergroup_id] –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É: '{title}' (ID: {chat_id})")
                return chat_id

    logger.error("‚ùå [get_supergroup_id] –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    return None

async def forward_thread_replies(old_thread_id, new_thread_id):
    logger.info(f"üöÄ [forward_thread_replies] –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å old_thread_id={old_thread_id}, new_thread_id={new_thread_id}")
    app = Client("my_session", api_id=API_ID, api_hash=API_HASH)

    try:
        await app.start()

        chat_id = await get_supergroup_id(app, CHAT_NAME)
        if not chat_id:
            logger.error("‚ùå [forward_thread_replies] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã.")
            await app.stop()
            return False
        found_message_id = None
        new_message_id = None

        # üîç –ñ–¥—ë–º, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥—ë–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (old_message_id)
        for attempt in range(5):  # 5 –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 —Å–µ–∫
            async for message in app.get_chat_history(chat_id):
                if hasattr(message, "forward_from_message_id") and message.forward_from_message_id == old_thread_id:
                    found_message_id = message.id
                    logger.info(f"‚úÖ [forward_thread_replies] –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {found_message_id}")
                    break
            if found_message_id:
                break
            logger.warning(f"‚ö†Ô∏è [forward_thread_replies] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/5), –∂–¥–µ–º 2 —Å–µ–∫...")
            await asyncio.sleep(2)

        if not found_message_id:
            logger.error(f"‚ùå [forward_thread_replies] –°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await app.stop()
            return False

        # üîç –ñ–¥—ë–º, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (new_message_id)
        for attempt in range(5):  # 5 –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 —Å–µ–∫
            async for message in app.get_chat_history(chat_id):
                if hasattr(message, "forward_from_message_id") and message.forward_from_message_id == new_thread_id:
                    new_message_id = message.id
                    logger.info(f"‚úÖ [forward_thread_replies] –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {new_message_id}")
                    break
            if new_message_id:
                break
            logger.warning(f"‚ö†Ô∏è [forward_thread_replies] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/5), –∂–¥–µ–º 2 —Å–µ–∫...")
            await asyncio.sleep(2)

        if not new_message_id:
            logger.error(f"‚ùå [forward_thread_replies] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await app.stop()
            return False

        # üîÑ –ü–µ—Ä–µ–Ω–æ—Å –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
        logger.info(f"üîÑ [forward_thread_replies] –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ {found_message_id} ‚Üí {new_message_id}")

        async for message in app.get_chat_history(chat_id):
            if hasattr(message, "reply_to_message_id") and message.reply_to_message_id == found_message_id:
                original_author = message.from_user.first_name if message.from_user else "–ê–Ω–æ–Ω–∏–º"
                username = f"@{message.from_user.username}" if message.from_user and message.from_user.username else ""
                original_text = message.text or "üì∑ –ú–µ–¥–∏–∞"

                logger.info(f"üì© [forward_thread_replies] –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ID {message.id}, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ {message.reply_to_message_id}")

                formatted_text = f"{username}\n{original_text}"

                await app.send_message(
                    chat_id=chat_id,
                    text=formatted_text,
                    reply_to_message_id=new_message_id
                )

        await app.stop()
        logger.info(f"‚úÖ [forward_thread_replies] –ü–µ—Ä–µ–Ω–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        return True

    except Exception as e:
        logger.error(f"‚ùå [forward_thread_replies] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        await app.stop()
        return False

async def get_message_id_by_thread_id(thread_id):
    """–ò—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —É –∫–æ—Ç–æ—Ä–æ–≥–æ message_id == thread_id, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ. –õ–æ–≥–∏—Ä—É–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ."""
    logger.info(f"üîç [get_message_id_by_thread_id] –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å message_id={thread_id}")

    async with Client("my_session", api_id=API_ID, api_hash=API_HASH) as app:
        try:
            chat_id = await get_supergroup_id(app, CHAT_NAME)
            if not chat_id:
                logger.error("‚ùå [get_message_id_by_thread_id] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã.")
                return None

            logger.info(f"üì• [get_message_id_by_thread_id] –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ {chat_id}...")

            for attempt in range(5):  # 5 –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 —Å–µ–∫
                found_message = None
                async for message in app.get_chat_history(chat_id):

                    # üîç –ï—Å–ª–∏ message_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å thread_id
                    if message.id == thread_id:
                        found_message = message.forward_from_message_id

                    if found_message:
                        logger.info(
                            f"‚úÖ [get_message_id_by_thread_id] –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å message_id={found_message} "
                            f"(—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å thread_id={thread_id})"
                        )
                        return found_message

                logger.warning(
                    f"‚ö†Ô∏è [get_message_id_by_thread_id] –ù–µ –Ω–∞–π–¥–µ–Ω message_id (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/5), –∂–¥–µ–º 2 —Å–µ–∫..."
                )
                await asyncio.sleep(2)

            logger.error(f"‚ùå [get_message_id_by_thread_id] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å message_id={thread_id} –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫.")

        except Exception as e:
            logger.error(f"‚ùå [get_message_id_by_thread_id] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ message_id: {e}")
            return None


