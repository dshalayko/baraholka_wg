from telegram import Update
from telegram.ext import CallbackContext, MessageHandler, filters, CommandHandler, ContextTypes

from comments_manager import forward_thread_replies, get_message_id_by_thread_id
from logger import logger

import sqlite3
import re
from collections import defaultdict

from utils import get_private_channel_post_link, notify_owner_about_comment

thread_messages = defaultdict(list)
CHAT_ID = -1002212626667  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

async def log_group_messages(update: Update, context: CallbackContext):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω ann_id."""
    try:
        user = update.effective_user
        user_id = update.effective_user.id
        username = update.effective_user.username or "–ù–µ—Ç username"
        first_name = update.effective_user.first_name or "–ù–µ—Ç –∏–º–µ–Ω–∏"
        last_name = update.effective_user.last_name or "–ù–µ—Ç —Ñ–∞–º–∏–ª–∏–∏"
        text = update.message.text or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
        message_id = update.message.message_id
        thread_id = update.message.message_thread_id if update.message.message_thread_id else None
        photo_id = update.message.photo[-1].file_id if update.message.photo else None

        logger.info(f"[log_group_messages] {user_id=} | {username=} | {message_id=} | {thread_id=} | {text=} | {photo_id=}")

        if user.is_bot and user.username == "GroupAnonymousBot":
            logger.info(f"üîï [log_group_messages] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.")
            return

        if thread_id:
            logger.info(f"üîÑ [log_group_messages] –ù–∞–π–¥–µ–Ω thread_id={thread_id}, –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π message_id...")
            message_id_from_thread = await get_message_id_by_thread_id(thread_id)

            if message_id_from_thread:
                logger.info(f"‚úÖ [log_group_messages] –ù–∞–π–¥–µ–Ω message_id={message_id_from_thread} –ø–æ thread_id={thread_id}")
                await notify_owner_about_comment(context, message_id_from_thread, user_id, text)
            else:
                logger.warning(f"‚ö†Ô∏è [log_group_messages] –ù–µ –Ω–∞–π–¥–µ–Ω message_id –¥–ª—è thread_id={thread_id}")

    except Exception as e:
        logger.error(f"‚ùå [log_group_messages] –û—à–∏–±–∫–∞: {e}")

def register_handlers(app):
    app.add_handler(MessageHandler(filters.ALL & filters.Chat(CHAT_ID), log_group_messages))