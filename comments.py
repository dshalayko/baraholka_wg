from telegram import Update
from telegram.ext import CallbackContext, MessageHandler, filters, CommandHandler
from logger import logger
import sqlite3
from collections import defaultdict
thread_messages = defaultdict(list)
CHAT_ID = -1002212626667  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã


# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
conn = sqlite3.connect("announcements.db")
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    message_id INTEGER,
    thread_id TEXT,
    text TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS comments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    message_id INTEGER,
    thread_id TEXT,
    text TEXT
)
''')

conn.commit()

async def log_group_messages(update: Update, context: CallbackContext):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    if update.effective_chat.id == CHAT_ID:
        user_id = update.effective_user.id
        username = update.effective_user.username
        first_name = update.effective_user.first_name
        last_name = update.effective_user.last_name or ""
        text = update.message.text or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
        message_id = update.message.message_id
        thread_id = update.message.message_thread_id if update.message.message_thread_id else "–ù–µ—Ç —Ç—Ä–µ–¥–∞"

        # –£—Å–ª–æ–≤–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: First Name: Telegram –∏ –ù–µ—Ç —Ç—Ä–µ–¥–∞
        if first_name == "Telegram" and username is None and last_name == "" and thread_id == "–ù–µ—Ç —Ç—Ä–µ–¥–∞":
            log_text = (
                f"[LOG] Message Info (No Thread):\n"
                f"- User ID: {user_id}\n"
                f"- Username: {username}\n"
                f"- First Name: {first_name}\n"
                f"- Last Name: {last_name}\n"
                f"- Message ID: {message_id}\n"
                f"- Thread ID: {thread_id}\n"
                f"- Text: {text}"
            )
            logger.info(log_text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor.execute(
                "INSERT INTO messages (user_id, username, first_name, last_name, message_id, thread_id, text) VALUES (?, ?, ?, ?, ?, ?, ?)",
                (user_id, username, first_name, last_name, message_id, thread_id, text)
            )
            conn.commit()

        # –£—Å–ª–æ–≤–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –°–æ–æ–±—â–µ–Ω–∏—è —Å Thread ID
        if thread_id != "–ù–µ—Ç —Ç—Ä–µ–¥–∞":
            log_text = (
                f"[LOG] Message Info (Thread ID Present):\n"
                f"- User ID: {user_id}\n"
                f"- Username: {username}\n"
                f"- First Name: {first_name}\n"
                f"- Last Name: {last_name}\n"
                f"- Message ID: {message_id}\n"
                f"- Thread ID: {thread_id}\n"
                f"- Text: {text}"
            )
            logger.info(log_text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            cursor.execute(
                "INSERT INTO comments (user_id, username, first_name, last_name, message_id, thread_id, text) VALUES (?, ?, ?, ?, ?, ?, ?)",
                (user_id, username, first_name, last_name, message_id, thread_id, text)
            )
            conn.commit()

async def get_thread_comments(update: Update, context: CallbackContext):
    """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞."""
    args = context.args  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get_thread <thread_id>")
        return

    try:
        thread_id = int(args[0])
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: ID —Ç—Ä–µ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    cursor.execute("SELECT text FROM comments WHERE thread_id = ?", (str(thread_id),))
    comments = cursor.fetchall()

    if not comments:
        await update.message.reply_text(f"‚ùå –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Ç—Ä–µ–¥–µ {thread_id}.")
        return

    response = f"üìú –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ —Ç—Ä–µ–¥–∞ {thread_id}:\n\n"
    for comment in comments:
        response += f"- {comment[0]}\n"

    await update.message.reply_text(response if len(response) < 4096 else "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –≤—ã–≤–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")

async def reply_to_message(update: Update, context: CallbackContext):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ –ø–æ –µ–≥–æ message_id."""
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <chat_id> <message_id> <—Ç–µ–∫—Å—Ç>")
        return

    try:
        chat_id = int(args[0])
        message_id = int(args[1])
        reply_text = " ".join(args[2:])
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: chat_id –∏ message_id –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text=reply_text,
            reply_to_message_id=message_id  # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        )
        await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def register_handlers(app):
    app.add_handler(MessageHandler(filters.ALL & filters.Chat(CHAT_ID), log_group_messages))
    app.add_handler(CommandHandler("get_thread", get_thread_comments))
    app.add_handler(CommandHandler("reply", reply_to_message))
